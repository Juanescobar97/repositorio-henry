Una expression siempre se convierte en un valor
Un statement realiza una accion

ejemplo 1+1 es una expression porque retorna un valor ( 2)

ejemplo un "if" porque dice que si esa condicion es verdadera ejecute tal accion

expression aritmeticas
son las expreciones matematicas
expression de strings 
String "Hola" resuelve a la string Hola
expression logicas
resuelven a un valor guleano
true , 1<2, 2==2
expression primarias 
Son expresiones que se escriben por si mismas, y no utilizan ningun operador. Incluyen a valores literales, uso de variables,
y algunos keywords de JS, por ejemplo
'hola';
23;
true;
this;//Hace referencia al keyword this
numero;// hace referencia a la variable numero
Cuando escribo una expresion que no retorna ningun valor, Devuelve la misma expresion
variable es una expresion, por ejemplo var numero= 10, sale 10, 
cualquier funcion espera una expression por ejemplo  console.log(numero); devuelve numero}
suma tambien espera una expresion: suma (1, 2) devuelve 3
expresiones de asignacion
por ejemplo a = 2; le asignamos valor a una variable, se les dice tambien expression statement
una asignacion no es lo mismo que una declaracion de una variable, 
expression con efectos secundarios
por ejemplo 
var contador = 1
contador ++
contador es igual a 2


statement
declaration statement
var prueba : Declaro la variable prueba
var toni; declaro la variable toni
function toni (a, b, c): No retorna nada pero declaro una funcion
Function expression vs function declaration
function declaration

function resta(a, b){
//bloque de codigo
}
function expression
var resta = function (a, b){
bloque de codigo
}
array.map(function(){
codigo;
});
//el argumento de la funcion espera una expression

si yo uso una funcion declarada, es declaration. Si yo uso una funcion donde el interprete espera un expresion es 
function expression
Inmediately Invoked Function Expression
cualquier cosa que escriba entre parentesis guarda adentro una expresion e
console.log ("LIFE")

CONDITIONAL STATEMENT
condicionales como :
if (condicion) la condicion es una expresion
si la condicon es true ejecuta este bloque de codigo
else if (condicion2) para si la condicion anterior no es verdadera
ejecuta este bloque de codigo si la condicion no es true y la condicion2 es true
else ( si ninguna es verdadera ejecuta esta opcion de codigo)

despues tenemos el Switch (valor)
                   case 'opcion' 
                   (quiere decir que si valor tiene a opcion adentro se ejecuta este bloque de codigo)
                   break  //sale del switch
                   case 'opcion2' 
                   (si tiene este valor dentro de switch se ejecuta este bloque de codigo)
                   break ;
                   case  'opcion3';
                   se ejecuta si el valor es opcion3
                   default;
                   se ejecuta siempre

statement ( loops )
while(condicion){ ;es igual al mientras; while (condicion)//Condicion es una expresion y ejecuta este codigo mientras 'condicion' sea true
}
for(var i=1; i < 10; i++){ (resive 3 expresiones; una variable, una condicion de verdad y un paso)
y ejecuta este bloque tantas veces hasta que se cumpla esta condicion
}
JUMPS
function() {
bloque de codgio
return; // cuando llegue aca, sale de la ejecucion de la funcion y retorna un valor
//bloque de codigo
}

for(var i = 1; i < 10; i++){
//ejecuta este bloque de codigo N veces;
continue; //salta a la siguiente interacion del bucle;
//desde aca no se ejecuta;
}
continue se usa dentro de un lazo que puede ser un for o un while 

'throw new' error(corta la ejecucion y tira un error)

PARENTESIS
nos damos cuenta si algo es un statement porque si lo pegamos en la consola de interprete de chrome o firefox vamos a
ver que no nos devuelve ningun resultado, en cambio las expressions si.
Una regla facil para distinguir entre una expression y un statement en JS es que si podemos ponerlo dentro de un console.log,
es una expression, si no, es un statement.


Valor booleano es True or False
